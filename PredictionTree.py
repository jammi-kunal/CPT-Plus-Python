# -*- coding: utf-8 -*-
"""PredictionTree.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cgqeebYXpIg77QmQ4cuk9VdvyAJfphJz
"""

class PredictionTree():
  item= None
  parent= None
  children= None

#Constructs a node and assigns the item value
  def __init__(self, itemValue=None):
    #print("Inside tree: ",itemValue,"\t")
    self.item= itemValue
    self.parent= None
    self.children= []

#Add child to the current node
  def addChild(self,child):
    newChild= PredictionTree(child)
    newChild.parent= self
    self.children.append(newChild)

#removes a child from the current node
  def removeChild(self,child):
    for c in self.children:
      if c.item== child:
        self.children.remove(c)

#return true if the given item is a child of this node
  def hasChild(self,target):
    found= self.getChild(target)
    if found is not None:
      return True
    return False

#returns the tree associated with the given child of this node
  def getChild(self,target):
    for c in self.children:
      if c.item== target:
        return c
    return None

#returns the list of children
  def getChildren(self):
    return self.children
  
  def get_level(self):
    level=0
    p= self.parent
    while p:
      level+=1
      p= p.parent
    #print("LEVEL= "+str(level))
    return level

  def printTree(self):
    spaces= ' '*self.get_level()*3
    prefix= spaces+"|__" if self.parent else ""
    print(prefix+str(self.item))
    if self.children:
      #print("\n")
      for child in self.children:
        child.printTree()
  